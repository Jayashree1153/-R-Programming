1. Demonstrate Vector Recycling in R.
Program:
A<-c(1:3)
B<-c(5:7)
print(A+B)
Output:
> source("~/.active-rstudio-document")
[1] 6 8 10
2. Demonstrate the usage of apply function in R
Program:
m1 <- matrix(C<-(1:10),nrow=5, ncol=6)
m1
a_m1 <- apply(m1, 2, sum)
a_m1
Output:
> a_m1
[1] 15 40 15 40 15 40
3. Demonstrate the usage of lapply function in R
Program:
City <- c("MADURAI","CHENNAI","TRICHY","COIMBATORE")
city_lower <-lapply(City, tolower)
str(city_lower)
Output:
List of 4
$ : chr "madurai"
$ : chr "chennai"
$ : chr "trichy"
$ : chr "coimbatore"
4. Demonstrate the usage of sapply function in R

Program:
dt <- cars
lmn_cars <- lapply(dt, min)
smn_cars <- sapply(dt, min)
lmn_cars
Output:
> lmn_cars
$speed
[1] 4
$dist
[1] 2
5. Demonstrate the usage of tapply function in R
Program:
set.seed(2)
data_set <- data.frame(price = round(rnorm(25, sd = 10, mean = 30)),
type = sample(1:4, size = 25, replace = TRUE),
store = sample(paste("Store", 1:4),
size = 25, replace = TRUE))
head(data_set)
price <- data_set$price
store <- data_set$store
type <- factor(data_set$type,labels = c("toy", "food", "electronics", "drinks"))
mean_prices <- tapply(price, type, mean)
mean_prices
Output:
> head(data_set)
price type store
1 21 2 Store 2
2 32 3 Store 3
3 46 4 Store 4

4 19 3 Store 4
5 29 1 Store 4
6 31 3 Store 4

> mean_prices
toy food electronics drinks
39.50000 30.33333 32.20000 29.33333
6. Demonstrate the usage of mapply function in R
Program:
x<-list(c(1,2,3,4))
y<-list(c(5,6,7,8))
result<-mapply(sum,x,y)
print(result)
Output:
> source("~/.active-rstudio-document")
[1] 36
7. Sum of Natural Numbers using Recursion
Program:
sum<-function(n){
if (n<=1){
return(n)
}else{
return(n+sum(n-1))
}
}
sum(7)
Output:
> source("~/.active-rstudio-document")
> sum(7)
[1] 28
>

8. Write a program to generate Fibonacci sequence using Recursion in R
Program:
recurse_fibonacci <- function(n) {
if(n <= 1) {
return(n)
} else {
return(recurse_fibonacci(n-1) + recurse_fibonacci(n-2))
}
}
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(recurse_fibonacci(i))
}
}
Output:
> source("~/.active-rstudio-document")
How many terms? 5
[1] "Fibonacci sequence:"
[1] 0
[1] 1
[1] 1
[1] 2
[1] 3
9. Write a program to find factorial of a number in R using recursion.
Program:
recur_factorial <- function(n) {
if(n <= 1) {

return(1)
} else {
x=n * recur_factorial(n-1)
return(x)
print(x)
}
}
Output:
> source("~/.active-rstudio-document")
> print(x)
[[1]]
[1] 1 2 3 4
